//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITSPublicApp.Web.ITSService.PractitionerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AreasofExpertise", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class AreasofExpertise : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AreasofExpertiseCategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AreasofExpertiseIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AreasofExpertiseNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AreasofExpertiseCategoryID {
            get {
                return this.AreasofExpertiseCategoryIDField;
            }
            set {
                if ((this.AreasofExpertiseCategoryIDField.Equals(value) != true)) {
                    this.AreasofExpertiseCategoryIDField = value;
                    this.RaisePropertyChanged("AreasofExpertiseCategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AreasofExpertiseID {
            get {
                return this.AreasofExpertiseIDField;
            }
            set {
                if ((this.AreasofExpertiseIDField.Equals(value) != true)) {
                    this.AreasofExpertiseIDField = value;
                    this.RaisePropertyChanged("AreasofExpertiseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AreasofExpertiseName {
            get {
                return this.AreasofExpertiseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AreasofExpertiseNameField, value) != true)) {
                    this.AreasofExpertiseNameField = value;
                    this.RaisePropertyChanged("AreasofExpertiseName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Practitioner", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class Practitioner : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateAddedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PractitionerFirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PractitionerLastNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAdded {
            get {
                return this.DateAddedField;
            }
            set {
                if ((this.DateAddedField.Equals(value) != true)) {
                    this.DateAddedField = value;
                    this.RaisePropertyChanged("DateAdded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PractitionerFirstName {
            get {
                return this.PractitionerFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PractitionerFirstNameField, value) != true)) {
                    this.PractitionerFirstNameField = value;
                    this.RaisePropertyChanged("PractitionerFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerID {
            get {
                return this.PractitionerIDField;
            }
            set {
                if ((this.PractitionerIDField.Equals(value) != true)) {
                    this.PractitionerIDField = value;
                    this.RaisePropertyChanged("PractitionerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PractitionerLastName {
            get {
                return this.PractitionerLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PractitionerLastNameField, value) != true)) {
                    this.PractitionerLastNameField = value;
                    this.RaisePropertyChanged("PractitionerLastName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PractitionerExpertise", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class PractitionerExpertise : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AreaofExpertiseIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerExpertiseIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AreaofExpertiseID {
            get {
                return this.AreaofExpertiseIDField;
            }
            set {
                if ((this.AreaofExpertiseIDField.Equals(value) != true)) {
                    this.AreaofExpertiseIDField = value;
                    this.RaisePropertyChanged("AreaofExpertiseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerExpertiseID {
            get {
                return this.PractitionerExpertiseIDField;
            }
            set {
                if ((this.PractitionerExpertiseIDField.Equals(value) != true)) {
                    this.PractitionerExpertiseIDField = value;
                    this.RaisePropertyChanged("PractitionerExpertiseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerID {
            get {
                return this.PractitionerIDField;
            }
            set {
                if ((this.PractitionerIDField.Equals(value) != true)) {
                    this.PractitionerIDField = value;
                    this.RaisePropertyChanged("PractitionerID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TreatmentCategory", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class TreatmentCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TreatmentCategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TreatmentCategoryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TreatmentCategoryID {
            get {
                return this.TreatmentCategoryIDField;
            }
            set {
                if ((this.TreatmentCategoryIDField.Equals(value) != true)) {
                    this.TreatmentCategoryIDField = value;
                    this.RaisePropertyChanged("TreatmentCategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TreatmentCategoryName {
            get {
                return this.TreatmentCategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TreatmentCategoryNameField, value) != true)) {
                    this.TreatmentCategoryNameField = value;
                    this.RaisePropertyChanged("TreatmentCategoryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PractitionerRegistration", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class PractitionerRegistration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerRegistrationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QualificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime QualificationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegistrationNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RegistrationTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TreatmentCategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearsQualifiedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpiryDate {
            get {
                return this.ExpiryDateField;
            }
            set {
                if ((this.ExpiryDateField.Equals(value) != true)) {
                    this.ExpiryDateField = value;
                    this.RaisePropertyChanged("ExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerID {
            get {
                return this.PractitionerIDField;
            }
            set {
                if ((this.PractitionerIDField.Equals(value) != true)) {
                    this.PractitionerIDField = value;
                    this.RaisePropertyChanged("PractitionerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerRegistrationID {
            get {
                return this.PractitionerRegistrationIDField;
            }
            set {
                if ((this.PractitionerRegistrationIDField.Equals(value) != true)) {
                    this.PractitionerRegistrationIDField = value;
                    this.RaisePropertyChanged("PractitionerRegistrationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Qualification {
            get {
                return this.QualificationField;
            }
            set {
                if ((object.ReferenceEquals(this.QualificationField, value) != true)) {
                    this.QualificationField = value;
                    this.RaisePropertyChanged("Qualification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime QualificationDate {
            get {
                return this.QualificationDateField;
            }
            set {
                if ((this.QualificationDateField.Equals(value) != true)) {
                    this.QualificationDateField = value;
                    this.RaisePropertyChanged("QualificationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegistrationNumber {
            get {
                return this.RegistrationNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistrationNumberField, value) != true)) {
                    this.RegistrationNumberField = value;
                    this.RaisePropertyChanged("RegistrationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RegistrationTypeID {
            get {
                return this.RegistrationTypeIDField;
            }
            set {
                if ((this.RegistrationTypeIDField.Equals(value) != true)) {
                    this.RegistrationTypeIDField = value;
                    this.RaisePropertyChanged("RegistrationTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TreatmentCategoryID {
            get {
                return this.TreatmentCategoryIDField;
            }
            set {
                if ((this.TreatmentCategoryIDField.Equals(value) != true)) {
                    this.TreatmentCategoryIDField = value;
                    this.RaisePropertyChanged("TreatmentCategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int YearsQualified {
            get {
                return this.YearsQualifiedField;
            }
            set {
                if ((this.YearsQualifiedField.Equals(value) != true)) {
                    this.YearsQualifiedField = value;
                    this.RaisePropertyChanged("YearsQualified");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PracitionerSupplierTreatmentCategory", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class PracitionerSupplierTreatmentCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PractitionerFirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PractitionerLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerRegistrationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SupplierIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SupplierPractitionerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TreatmentCategoryIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PractitionerFirstName {
            get {
                return this.PractitionerFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PractitionerFirstNameField, value) != true)) {
                    this.PractitionerFirstNameField = value;
                    this.RaisePropertyChanged("PractitionerFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerID {
            get {
                return this.PractitionerIDField;
            }
            set {
                if ((this.PractitionerIDField.Equals(value) != true)) {
                    this.PractitionerIDField = value;
                    this.RaisePropertyChanged("PractitionerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PractitionerLastName {
            get {
                return this.PractitionerLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PractitionerLastNameField, value) != true)) {
                    this.PractitionerLastNameField = value;
                    this.RaisePropertyChanged("PractitionerLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerRegistrationID {
            get {
                return this.PractitionerRegistrationIDField;
            }
            set {
                if ((this.PractitionerRegistrationIDField.Equals(value) != true)) {
                    this.PractitionerRegistrationIDField = value;
                    this.RaisePropertyChanged("PractitionerRegistrationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SupplierID {
            get {
                return this.SupplierIDField;
            }
            set {
                if ((this.SupplierIDField.Equals(value) != true)) {
                    this.SupplierIDField = value;
                    this.RaisePropertyChanged("SupplierID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SupplierPractitionerID {
            get {
                return this.SupplierPractitionerIDField;
            }
            set {
                if ((this.SupplierPractitionerIDField.Equals(value) != true)) {
                    this.SupplierPractitionerIDField = value;
                    this.RaisePropertyChanged("SupplierPractitionerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TreatmentCategoryID {
            get {
                return this.TreatmentCategoryIDField;
            }
            set {
                if ((this.TreatmentCategoryIDField.Equals(value) != true)) {
                    this.TreatmentCategoryIDField = value;
                    this.RaisePropertyChanged("TreatmentCategoryID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SupplierPractitionerSupplier", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class SupplierPractitionerSupplier : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerRegistrationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegistrationNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegistrationTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SupplierIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupplierNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SupplierPractitionerIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerRegistrationID {
            get {
                return this.PractitionerRegistrationIDField;
            }
            set {
                if ((this.PractitionerRegistrationIDField.Equals(value) != true)) {
                    this.PractitionerRegistrationIDField = value;
                    this.RaisePropertyChanged("PractitionerRegistrationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegistrationNumber {
            get {
                return this.RegistrationNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistrationNumberField, value) != true)) {
                    this.RegistrationNumberField = value;
                    this.RaisePropertyChanged("RegistrationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegistrationTypeName {
            get {
                return this.RegistrationTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistrationTypeNameField, value) != true)) {
                    this.RegistrationTypeNameField = value;
                    this.RaisePropertyChanged("RegistrationTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SupplierID {
            get {
                return this.SupplierIDField;
            }
            set {
                if ((this.SupplierIDField.Equals(value) != true)) {
                    this.SupplierIDField = value;
                    this.RaisePropertyChanged("SupplierID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupplierName {
            get {
                return this.SupplierNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SupplierNameField, value) != true)) {
                    this.SupplierNameField = value;
                    this.RaisePropertyChanged("SupplierName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SupplierPractitionerID {
            get {
                return this.SupplierPractitionerIDField;
            }
            set {
                if ((this.SupplierPractitionerIDField.Equals(value) != true)) {
                    this.SupplierPractitionerIDField = value;
                    this.RaisePropertyChanged("SupplierPractitionerID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPractitionerTreatmentRegistration", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class PagedPractitionerTreatmentRegistration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ITSPublicApp.Web.ITSService.PractitionerService.PractitionerTreatmentRegistration[] PractitionerTreatmentRegistrationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SearchTotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ITSPublicApp.Web.ITSService.PractitionerService.PractitionerTreatmentRegistration[] PractitionerTreatmentRegistrations {
            get {
                return this.PractitionerTreatmentRegistrationsField;
            }
            set {
                if ((object.ReferenceEquals(this.PractitionerTreatmentRegistrationsField, value) != true)) {
                    this.PractitionerTreatmentRegistrationsField = value;
                    this.RaisePropertyChanged("PractitionerTreatmentRegistrations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SearchTotalCount {
            get {
                return this.SearchTotalCountField;
            }
            set {
                if ((this.SearchTotalCountField.Equals(value) != true)) {
                    this.SearchTotalCountField = value;
                    this.RaisePropertyChanged("SearchTotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PractitionerTreatmentRegistration", Namespace="http://schemas.datacontract.org/2004/07/ITSService.DTO")]
    [System.SerializableAttribute()]
    public partial class PractitionerTreatmentRegistration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PractitionerFirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PractitionerLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PractitionerRegistrationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegistrationNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegistrationTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TreatmentCategoryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PractitionerFirstName {
            get {
                return this.PractitionerFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PractitionerFirstNameField, value) != true)) {
                    this.PractitionerFirstNameField = value;
                    this.RaisePropertyChanged("PractitionerFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerID {
            get {
                return this.PractitionerIDField;
            }
            set {
                if ((this.PractitionerIDField.Equals(value) != true)) {
                    this.PractitionerIDField = value;
                    this.RaisePropertyChanged("PractitionerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PractitionerLastName {
            get {
                return this.PractitionerLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PractitionerLastNameField, value) != true)) {
                    this.PractitionerLastNameField = value;
                    this.RaisePropertyChanged("PractitionerLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PractitionerRegistrationID {
            get {
                return this.PractitionerRegistrationIDField;
            }
            set {
                if ((this.PractitionerRegistrationIDField.Equals(value) != true)) {
                    this.PractitionerRegistrationIDField = value;
                    this.RaisePropertyChanged("PractitionerRegistrationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegistrationNumber {
            get {
                return this.RegistrationNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistrationNumberField, value) != true)) {
                    this.RegistrationNumberField = value;
                    this.RaisePropertyChanged("RegistrationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegistrationTypeName {
            get {
                return this.RegistrationTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RegistrationTypeNameField, value) != true)) {
                    this.RegistrationTypeNameField = value;
                    this.RaisePropertyChanged("RegistrationTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TreatmentCategoryName {
            get {
                return this.TreatmentCategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TreatmentCategoryNameField, value) != true)) {
                    this.TreatmentCategoryNameField = value;
                    this.RaisePropertyChanged("TreatmentCategoryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITSService.PractitionerService.IPractitionerService")]
    public interface IPractitionerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetAllAreasofExpertise", ReplyAction="http://tempuri.org/IPractitionerService/GetAllAreasofExpertiseResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.AreasofExpertise[] GetAllAreasofExpertise();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/AddPractitioner", ReplyAction="http://tempuri.org/IPractitionerService/AddPractitionerResponse")]
        int AddPractitioner(ITSPublicApp.Web.ITSService.PractitionerService.Practitioner practitioner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerLikePractitionerName", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerLikePractitionerNameRespon" +
            "se")]
        ITSPublicApp.Web.ITSService.PractitionerService.Practitioner[] GetPractitionerLikePractitionerName(string practitionerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/DeletePractitionerByPractitionerID", ReplyAction="http://tempuri.org/IPractitionerService/DeletePractitionerByPractitionerIDRespons" +
            "e")]
        int DeletePractitionerByPractitionerID(int practitionerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/AddPractitionerExpertise", ReplyAction="http://tempuri.org/IPractitionerService/AddPractitionerExpertiseResponse")]
        int AddPractitionerExpertise(ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise practitionerExpertise);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/UpdatePractitionerByPractitionerID", ReplyAction="http://tempuri.org/IPractitionerService/UpdatePractitionerByPractitionerIDRespons" +
            "e")]
        int UpdatePractitionerByPractitionerID(ITSPublicApp.Web.ITSService.PractitionerService.Practitioner practitioner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerByPractitionerID", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerByPractitionerIDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.Practitioner GetPractitionerByPractitionerID(int practitionerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerExpertiseByPractitionerExp" +
            "ertiseID", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerExpertiseByPractitionerExp" +
            "ertiseIDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise GetPractitionerExpertiseByPractitionerExpertiseID(int practitionerExpertiseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerExpertiseByPractitionerID", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerExpertiseByPractitionerIDR" +
            "esponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise[] GetPractitionerExpertiseByPractitionerID(int practitionerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerExpertiseByAreaofExpertise" +
            "ID", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerExpertiseByAreaofExpertise" +
            "IDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise[] GetPractitionerExpertiseByAreaofExpertiseID(int areaofExpertiseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/DeletePractitionerExpertiseByPractitioner" +
            "ExpertiseID", ReplyAction="http://tempuri.org/IPractitionerService/DeletePractitionerExpertiseByPractitioner" +
            "ExpertiseIDResponse")]
        int DeletePractitionerExpertiseByPractitionerExpertiseID(int practitionerExpertiseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/UpdatePractitionerExpertise", ReplyAction="http://tempuri.org/IPractitionerService/UpdatePractitionerExpertiseResponse")]
        void UpdatePractitionerExpertise(ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise[] practitionerExpertise);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetAllTreatmentCatagories", ReplyAction="http://tempuri.org/IPractitionerService/GetAllTreatmentCatagoriesResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.TreatmentCategory[] GetAllTreatmentCatagories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/AddPractitionerRegistration", ReplyAction="http://tempuri.org/IPractitionerService/AddPractitionerRegistrationResponse")]
        int AddPractitionerRegistration(ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration practitionerRegistration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/DeletePractitionerRegistrationByPractitio" +
            "nerRegistrationID", ReplyAction="http://tempuri.org/IPractitionerService/DeletePractitionerRegistrationByPractitio" +
            "nerRegistrationIDResponse")]
        int DeletePractitionerRegistrationByPractitionerRegistrationID(int practitionerRegistrationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerRegistrationByPractitioner" +
            "RegistrationID", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerRegistrationByPractitioner" +
            "RegistrationIDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration GetPractitionerRegistrationByPractitionerRegistrationID(int practitionerRegistrationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerRegistrationsByPractitione" +
            "rID", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerRegistrationsByPractitione" +
            "rIDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration[] GetPractitionerRegistrationsByPractitionerID(int PractitionerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerRegistrationsByTreatmentCa" +
            "tegoryID", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerRegistrationsByTreatmentCa" +
            "tegoryIDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration[] GetPractitionerRegistrationsByTreatmentCategoryID(int treatmentCategoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionerRegistrationsByRegistratio" +
            "nTypeID", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionerRegistrationsByRegistratio" +
            "nTypeIDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration[] GetPractitionerRegistrationsByRegistrationTypeID(int registrationTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/UpdatePractitionerRegistrationByPractitio" +
            "nerRegistrationID", ReplyAction="http://tempuri.org/IPractitionerService/UpdatePractitionerRegistrationByPractitio" +
            "nerRegistrationIDResponse")]
        int UpdatePractitionerRegistrationByPractitionerRegistrationID(ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration practitionerRegistration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPracitionersByTreatmentCategoryIDAndSu" +
            "pplierID", ReplyAction="http://tempuri.org/IPractitionerService/GetPracitionersByTreatmentCategoryIDAndSu" +
            "pplierIDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PracitionerSupplierTreatmentCategory[] GetPracitionersByTreatmentCategoryIDAndSupplierID(int supplierID, int treatmentCategoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionersRecentlyAdded", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionersRecentlyAddedResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.Practitioner[] GetPractitionersRecentlyAdded();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetSupplierPractitionerSupplierByPractiti" +
            "onerID", ReplyAction="http://tempuri.org/IPractitionerService/GetSupplierPractitionerSupplierByPractiti" +
            "onerIDResponse")]
        ITSPublicApp.Web.ITSService.PractitionerService.SupplierPractitionerSupplier[] GetSupplierPractitionerSupplierByPractitionerID(int practitionerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionersLikePractitionerName", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionersLikePractitionerNameRespo" +
            "nse")]
        ITSPublicApp.Web.ITSService.PractitionerService.PagedPractitionerTreatmentRegistration GetPractitionersLikePractitionerName(string practitionerName, int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPractitionerService/GetPractitionersLikeTreatmentCategoryName" +
            "", ReplyAction="http://tempuri.org/IPractitionerService/GetPractitionersLikeTreatmentCategoryName" +
            "Response")]
        ITSPublicApp.Web.ITSService.PractitionerService.PagedPractitionerTreatmentRegistration GetPractitionersLikeTreatmentCategoryName(string treatmentCategoryName, int skip, int take);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPractitionerServiceChannel : ITSPublicApp.Web.ITSService.PractitionerService.IPractitionerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PractitionerServiceClient : System.ServiceModel.ClientBase<ITSPublicApp.Web.ITSService.PractitionerService.IPractitionerService>, ITSPublicApp.Web.ITSService.PractitionerService.IPractitionerService {
        
        public PractitionerServiceClient() {
        }
        
        public PractitionerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PractitionerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PractitionerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PractitionerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.AreasofExpertise[] GetAllAreasofExpertise() {
            return base.Channel.GetAllAreasofExpertise();
        }
        
        public int AddPractitioner(ITSPublicApp.Web.ITSService.PractitionerService.Practitioner practitioner) {
            return base.Channel.AddPractitioner(practitioner);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.Practitioner[] GetPractitionerLikePractitionerName(string practitionerName) {
            return base.Channel.GetPractitionerLikePractitionerName(practitionerName);
        }
        
        public int DeletePractitionerByPractitionerID(int practitionerID) {
            return base.Channel.DeletePractitionerByPractitionerID(practitionerID);
        }
        
        public int AddPractitionerExpertise(ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise practitionerExpertise) {
            return base.Channel.AddPractitionerExpertise(practitionerExpertise);
        }
        
        public int UpdatePractitionerByPractitionerID(ITSPublicApp.Web.ITSService.PractitionerService.Practitioner practitioner) {
            return base.Channel.UpdatePractitionerByPractitionerID(practitioner);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.Practitioner GetPractitionerByPractitionerID(int practitionerID) {
            return base.Channel.GetPractitionerByPractitionerID(practitionerID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise GetPractitionerExpertiseByPractitionerExpertiseID(int practitionerExpertiseID) {
            return base.Channel.GetPractitionerExpertiseByPractitionerExpertiseID(practitionerExpertiseID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise[] GetPractitionerExpertiseByPractitionerID(int practitionerID) {
            return base.Channel.GetPractitionerExpertiseByPractitionerID(practitionerID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise[] GetPractitionerExpertiseByAreaofExpertiseID(int areaofExpertiseID) {
            return base.Channel.GetPractitionerExpertiseByAreaofExpertiseID(areaofExpertiseID);
        }
        
        public int DeletePractitionerExpertiseByPractitionerExpertiseID(int practitionerExpertiseID) {
            return base.Channel.DeletePractitionerExpertiseByPractitionerExpertiseID(practitionerExpertiseID);
        }
        
        public void UpdatePractitionerExpertise(ITSPublicApp.Web.ITSService.PractitionerService.PractitionerExpertise[] practitionerExpertise) {
            base.Channel.UpdatePractitionerExpertise(practitionerExpertise);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.TreatmentCategory[] GetAllTreatmentCatagories() {
            return base.Channel.GetAllTreatmentCatagories();
        }
        
        public int AddPractitionerRegistration(ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration practitionerRegistration) {
            return base.Channel.AddPractitionerRegistration(practitionerRegistration);
        }
        
        public int DeletePractitionerRegistrationByPractitionerRegistrationID(int practitionerRegistrationID) {
            return base.Channel.DeletePractitionerRegistrationByPractitionerRegistrationID(practitionerRegistrationID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration GetPractitionerRegistrationByPractitionerRegistrationID(int practitionerRegistrationID) {
            return base.Channel.GetPractitionerRegistrationByPractitionerRegistrationID(practitionerRegistrationID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration[] GetPractitionerRegistrationsByPractitionerID(int PractitionerID) {
            return base.Channel.GetPractitionerRegistrationsByPractitionerID(PractitionerID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration[] GetPractitionerRegistrationsByTreatmentCategoryID(int treatmentCategoryID) {
            return base.Channel.GetPractitionerRegistrationsByTreatmentCategoryID(treatmentCategoryID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration[] GetPractitionerRegistrationsByRegistrationTypeID(int registrationTypeID) {
            return base.Channel.GetPractitionerRegistrationsByRegistrationTypeID(registrationTypeID);
        }
        
        public int UpdatePractitionerRegistrationByPractitionerRegistrationID(ITSPublicApp.Web.ITSService.PractitionerService.PractitionerRegistration practitionerRegistration) {
            return base.Channel.UpdatePractitionerRegistrationByPractitionerRegistrationID(practitionerRegistration);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PracitionerSupplierTreatmentCategory[] GetPracitionersByTreatmentCategoryIDAndSupplierID(int supplierID, int treatmentCategoryID) {
            return base.Channel.GetPracitionersByTreatmentCategoryIDAndSupplierID(supplierID, treatmentCategoryID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.Practitioner[] GetPractitionersRecentlyAdded() {
            return base.Channel.GetPractitionersRecentlyAdded();
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.SupplierPractitionerSupplier[] GetSupplierPractitionerSupplierByPractitionerID(int practitionerID) {
            return base.Channel.GetSupplierPractitionerSupplierByPractitionerID(practitionerID);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PagedPractitionerTreatmentRegistration GetPractitionersLikePractitionerName(string practitionerName, int skip, int take) {
            return base.Channel.GetPractitionersLikePractitionerName(practitionerName, skip, take);
        }
        
        public ITSPublicApp.Web.ITSService.PractitionerService.PagedPractitionerTreatmentRegistration GetPractitionersLikeTreatmentCategoryName(string treatmentCategoryName, int skip, int take) {
            return base.Channel.GetPractitionersLikeTreatmentCategoryName(treatmentCategoryName, skip, take);
        }
    }
}
